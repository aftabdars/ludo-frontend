"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useQueryParams = exports.getQueryParams = exports.setQueryParams = void 0;

var _react = _interopRequireDefault(require("react"));

var _isNode = _interopRequireDefault(require("./isNode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var queryParamListeners = [];
var queryParamObject = {};

var setQueryParams = function setQueryParams(inObj) {
  var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (!(inObj instanceof Object)) {
    throw new Error('Object required');
  }

  if (replace) {
    queryParamObject = inObj;
  } else {
    Object.assign(queryParamObject, inObj);
  }

  var now = Date.now();
  queryParamListeners.forEach(function (cb) {
    return cb(now);
  });

  if (!_isNode.default) {
    var qs = '?' + objectToQueryString(queryParamObject);

    if (qs === location.search) {
      return;
    }

    history.replaceState(null, null, location.pathname + (qs !== '?' ? qs : ''));
  }
};

exports.setQueryParams = setQueryParams;

var getQueryParams = function getQueryParams() {
  return Object.assign({}, queryParamObject);
};
/**
 * This takes an URL query string and converts it into a javascript object.
 * @param {string} inStr
 * @return {object}
 */


exports.getQueryParams = getQueryParams;

var queryStringToObject = function queryStringToObject(inStr) {
  var p = new URLSearchParams(inStr);
  var result = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = p[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var param = _step.value;
      result[param[0]] = param[1];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
};
/**
 * This takes a javascript object and turns it into a URL query string.
 * @param {object} inObj
 * @return {string}
 */


var objectToQueryString = function objectToQueryString(inObj) {
  var qs = new URLSearchParams();
  Object.entries(inObj).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return value !== undefined ? qs.append(key, value) : null;
  });
  return qs.toString();
};

if (!_isNode.default) {
  queryParamObject = queryStringToObject(location.search.substr(1));
}
/**
 * This hook returns the currently set query parameters as object and offers a setter function
 * to set a new query string.
 *
 * All components that are hooked to the query parameters will get updated if they change.
 * Query params can also be updated along with the path, by calling `navigate(url, queryParams)`.
 *
 * @returns {array} [queryParamObject, setQueryParams]
 */


var useQueryParams = function useQueryParams() {
  var setUpdate = _react.default.useState(0)[1];

  _react.default.useEffect(function () {
    queryParamListeners.push(setUpdate);
    return function () {
      var index = queryParamListeners.indexOf(setUpdate);

      if (index === -1) {
        return;
      }

      queryParamListeners.splice(index, 1);
    };
  }, [setUpdate]);

  return [queryParamObject, setQueryParams];
};

exports.useQueryParams = useQueryParams;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeVBhcmFtcy5qcyJdLCJuYW1lcyI6WyJxdWVyeVBhcmFtTGlzdGVuZXJzIiwicXVlcnlQYXJhbU9iamVjdCIsInNldFF1ZXJ5UGFyYW1zIiwiaW5PYmoiLCJyZXBsYWNlIiwiT2JqZWN0IiwiRXJyb3IiLCJhc3NpZ24iLCJub3ciLCJEYXRlIiwiZm9yRWFjaCIsImNiIiwiaXNOb2RlIiwicXMiLCJvYmplY3RUb1F1ZXJ5U3RyaW5nIiwibG9jYXRpb24iLCJzZWFyY2giLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicGF0aG5hbWUiLCJnZXRRdWVyeVBhcmFtcyIsInF1ZXJ5U3RyaW5nVG9PYmplY3QiLCJpblN0ciIsInAiLCJVUkxTZWFyY2hQYXJhbXMiLCJyZXN1bHQiLCJwYXJhbSIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImFwcGVuZCIsInRvU3RyaW5nIiwic3Vic3RyIiwidXNlUXVlcnlQYXJhbXMiLCJzZXRVcGRhdGUiLCJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxtQkFBbUIsR0FBRyxFQUE1QjtBQUNBLElBQUlDLGdCQUFnQixHQUFHLEVBQXZCOztBQUVPLElBQU1DLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsS0FBRCxFQUE0QjtBQUFBLE1BQXBCQyxPQUFvQix1RUFBVixLQUFVOztBQUN6RCxNQUFHLEVBQUVELEtBQUssWUFBWUUsTUFBbkIsQ0FBSCxFQUE4QjtBQUM3QixVQUFNLElBQUlDLEtBQUosQ0FBVSxpQkFBVixDQUFOO0FBQ0E7O0FBQ0QsTUFBR0YsT0FBSCxFQUFXO0FBQ1ZILElBQUFBLGdCQUFnQixHQUFHRSxLQUFuQjtBQUNBLEdBRkQsTUFFTztBQUNORSxJQUFBQSxNQUFNLENBQUNFLE1BQVAsQ0FBY04sZ0JB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RCxFQVVHLENBQUNMLFNBQUQsQ0FWSDs7QUFZQSxTQUFPLENBQUNsQyxnQkFBRCxFQUFtQkMsY0FBbkIsQ0FBUDtBQUNBLENBaEJNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGlzTm9kZSBmcm9tICcuL2lzTm9kZSc7XHJcblxyXG5jb25zdCBxdWVyeVBhcmFtTGlzdGVuZXJzID0gW107XHJcbmxldCBxdWVyeVBhcmFtT2JqZWN0ID0ge307XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0UXVlcnlQYXJhbXMgPSAoaW5PYmosIHJlcGxhY2UgPSBmYWxzZSkgPT4ge1xyXG5cdGlmKCEoaW5PYmogaW5zdGFuY2VvZiBPYmplY3QpKXtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IHJlcXVpcmVkJyk7XHJcblx0fVxyXG5cdGlmKHJlcGxhY2Upe1xyXG5cdFx0cXVlcnlQYXJhbU9iamVjdCA9IGluT2JqO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRPYmplY3QuYXNzaWduKHF1ZXJ5UGFyYW1PYmplY3QsIGluT2JqKTtcclxuXHR9XHJcblx0Y29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuXHRxdWVyeVBhcmFtTGlzdGVuZXJzLmZvckVhY2goY2IgPT4gY2Iobm93KSk7XHJcblx0aWYgKCFpc05vZGUpIHtcclxuXHRcdGNvbnN0IHFzID0gJz8nICsgb2JqZWN0VG9RdWVyeVN0cmluZyhxdWVyeVBhcmFtT2JqZWN0KTtcclxuXHRcdGlmKHFzID09PSBsb2NhdGlvbi5zZWFyY2gpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgbG9jYXRpb24ucGF0aG5hbWUgKyAocXMgIT09ICc/JyA/IHFzIDogJycpKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UXVlcnlQYXJhbXMgPSAoKSA9PiBPYmplY3QuYXNzaWduKHt9LCBxdWVyeVBhcmFtT2JqZWN0KTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHRha2VzIGFuIFVSTCBxdWVyeSBzdHJpbmcgYW5kIGNvbnZlcnRzIGl0IGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHtzdHJpbmd9IGluU3RyXHJcbiAqIEByZXR1cm4ge29iamVjdH1cclxuICovXHJcbmNvbnN0IHF1ZXJ5U3RyaW5nVG9PYmplY3QgPSAoaW5TdHIpID0+IHtcclxuXHRjb25zdCBwID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhpblN0cik7XHJcblx0bGV0IHJlc3VsdCA9IHt9O1xyXG5cdGZvciAobGV0IHBhcmFtIG9mIHApIHtcclxuXHRcdHJlc3VsdFtwYXJhbVswXV0gPSBwYXJhbVsxXTtcclxuXHR9XHJcblx0cmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHRha2VzIGEgamF2YXNjcmlwdCBvYmplY3QgYW5kIHR1cm5zIGl0IGludG8gYSBVUkwgcXVlcnkgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gaW5PYmpcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxuY29uc3Qgb2JqZWN0VG9RdWVyeVN0cmluZyA9IChpbk9iaikgPT4ge1xyXG5cdGNvbnN0IHFzID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xyXG5cdE9iamVjdC5lbnRyaWVzKGluT2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgPyBxcy5hcHBlbmQoa2V5LCB2YWx1ZSkgOiBudWxsKTtcclxuXHRyZXR1cm4gcXMudG9TdHJpbmcoKTtcclxufTtcclxuXHJcbmlmKCFpc05vZGUpe1xyXG5cdHF1ZXJ5UGFyYW1PYmplY3QgPSBxdWVyeVN0cmluZ1RvT2JqZWN0KGxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkpO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBob29rIHJldHVybnMgdGhlIGN1cnJlbnRseSBzZXQgcXVlcnkgcGFyYW1ldGVycyBhcyBvYmplY3QgYW5kIG9mZmVycyBhIHNldHRlciBmdW5jdGlvblxyXG4gKiB0byBzZXQgYSBuZXcgcXVlcnkgc3RyaW5nLlxyXG4gKlxyXG4gKiBBbGwgY29tcG9uZW50cyB0aGF0IGFyZSBob29rZWQgdG8gdGhlIHF1ZXJ5IHBhcmFtZXRlcnMgd2lsbCBnZXQgdXBkYXRlZCBpZiB0aGV5IGNoYW5nZS5cclxuICogUXVlcnkgcGFyYW1zIGNhbiBhbHNvIGJlIHVwZGF0ZWQgYWxvbmcgd2l0aCB0aGUgcGF0aCwgYnkgY2FsbGluZyBgbmF2aWdhdGUodXJsLCBxdWVyeVBhcmFtcylgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YXJyYXl9IFtxdWVyeVBhcmFtT2JqZWN0LCBzZXRRdWVyeVBhcmFtc11cclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VRdWVyeVBhcmFtcyA9ICgpID0+IHtcclxuXHRjb25zdCBzZXRVcGRhdGUgPSBSZWFjdC51c2VTdGF0ZSgwKVsxXTtcclxuXHJcblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuXHRcdHF1ZXJ5UGFyYW1MaXN0ZW5lcnMucHVzaChzZXRVcGRhdGUpO1xyXG5cclxuXHRcdHJldHVybiAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGluZGV4ID0gcXVlcnlQYXJhbUxpc3RlbmVycy5pbmRleE9mKHNldFVwZGF0ZSk7XHJcblx0XHRcdGlmIChpbmRleCA9PT0gLTEpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0cXVlcnlQYXJhbUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0fTtcclxuXHR9LCBbc2V0VXBkYXRlXSk7XHJcblxyXG5cdHJldHVybiBbcXVlcnlQYXJhbU9iamVjdCwgc2V0UXVlcnlQYXJhbXNdO1xyXG59O1xyXG4iXX0=